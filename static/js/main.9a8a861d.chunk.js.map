{"version":3,"sources":["components/Squares.jsx","components/Board.jsx","components/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["Squares","props","style","border","width","height","padding","margin","onClick","value","Board","display","square","map","val","id","onclick","Game","useState","Array","fill","board","setBoard","isX","setX","winner","condition","i","length","a","b","c","calculateWinner","boardCopy","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAiBeA,EAjBC,SAACC,GAWb,OACI,wBAAQC,MAXE,CACVC,OAAU,gBACVC,MAAQ,OACRC,OAAU,OACVC,QAAU,MACV,SAAa,OACb,WAAe,OACfC,OAAS,QAIaC,QAASP,EAAMO,QAArC,SACKP,EAAMQ,SCaJC,EAzBD,SAAET,GAWZ,OACI,qBAAKC,MAXM,CACVK,OAAS,OACTJ,OAAU,gBACVC,MAAQ,QACRC,OAAU,QACVM,QAAU,OACV,aAAiB,gCACjBL,QAAU,uBAIX,SAGIL,EAAMW,OAAOC,KAAK,SAACC,EAAIC,GACnB,OACI,cAAC,EAAD,CAAkBN,MAAOK,EAAKN,QAAU,kBAAMP,EAAMe,QAAQD,KAA9CA,SC6BnBE,EA5CF,WAET,IAFc,EAuBWC,mBAASC,MAAM,GAAGC,KAAK,OAvBlC,mBAuBPC,EAvBO,KAuBDC,EAvBC,OAwBKJ,oBAAS,GAxBd,mBAwBPK,EAxBO,KAwBHC,EAxBG,KAyBRC,EAvBkB,SAACb,GAYrB,IAXA,IAAMc,EAAY,CACd,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGDC,EAAE,EAAEA,EAAED,EAAUE,OAAOD,IAAI,CAAC,IAAD,cACfD,EAAUC,GADK,GACxBE,EADwB,KACtBC,EADsB,KACpBC,EADoB,KAE/B,GAAGnB,EAAOiB,KAAOjB,EAAOkB,IAAMlB,EAAOkB,KAAOlB,EAAOmB,GAC/C,OAAOnB,EAAOiB,GAGtB,OAAO,KAKIG,CAAgBX,GAW/B,OACI,gCACI,cAAC,EAAD,CAAQT,OAAQS,EAAQL,QAZb,SAACW,GAChB,IAAMM,EAAS,YAAOZ,GACnBI,GAAUQ,EAAUN,KAEvBM,EAAUN,GAAKJ,EAAM,IAAM,IAC3BD,EAASW,GAETT,GAAMD,OAMDE,EAAS,eAAiBA,EAAU,kBAAmBF,EAAM,aAAe,kBC/B1EW,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9a8a861d.chunk.js","sourcesContent":["const Squares = (props) =>{\n    const style = {\n        border  : \"2px solid red\",\n        width : \"50px\",\n        height  : \"50px\",\n        padding : \"6px\",\n        \"fontSize\" : \"40px\",\n        \"fontWeight\" : \"bold\",\n        margin : \"10px\",\n    }\n\n    return (\n        <button style={style} onClick={props.onClick}>\n            {props.value}\n        </button >\n    )\n}\nexport default Squares","import Squares from \"./Squares\"\nconst Board = ( props )=>{\n     const style = {\n         margin : \"10px\",\n         border  : \"2px solid red\",\n         width : \"250px\",\n         height  : \"250px\",\n         display : \"grid\",\n         \"gridTemplate\" : \"repeat(3,1fr) / repeat(3,1fr)\",\n         padding : \"15px 25px 25px 15px\",\n     }\n\n    return (\n        <div style={style}>\n         {/* console.log(props.square)   */}\n        {\n            props.square.map( (val,id) =>{\n                return(\n                    <Squares key={id} value={val} onClick={ () => props.onclick(id) } />\n                )\n            }  )\n        }\n                        \n        </div>\n    )\n}\nexport default Board","import { useState } from \"react\"\nimport Board from \"./Board\"\n// import { CalculateWinner } from \"./Helper\"\nconst Game = () =>{\n\n    const calculateWinner = (square) =>{\n        const condition = [\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,4,8],\n            [2,5,8],\n            [0,3,6],\n            [2,4,6],\n            [1,4,7]\n        ]\n\n        for(let i=0;i<condition.length;i++){\n            const [a,b,c] = condition[i]\n            if(square[a] === square[b] && square[b] === square[c]){\n                return square[a];\n            }\n        }\n        return null;\n    }\n\n    const [board,setBoard] = useState(Array(9).fill(null));\n    const [isX,setX] = useState(true) \n    const winner = calculateWinner(board)\n    const handleClick= (i) =>{\n        const boardCopy = [...board]\n        if(winner || boardCopy[i] )\n            return;\n        boardCopy[i] = isX ? 'X' : \"O\"\n        setBoard(boardCopy)\n        // isX = isX ? 'X' : \"O\"\n        setX(!isX)\n    }\n\n    return(\n        <div>\n            <Board  square={board}  onclick={handleClick}  />\n            {winner ? \"winner is : \" + winner  : 'next player : '+ (isX ? \"turn for X\" : \"turn for O\" )}\n        </div>\n    )\n}\n\nexport default Game","import './App.css';\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return (\n    <div>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}